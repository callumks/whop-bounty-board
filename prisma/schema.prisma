// This is your Prisma schema file for ChallengeHub
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  whopUserId      String   @unique
  email           String   @unique
  username        String   @unique
  avatarUrl       String?
  isCreator       Boolean  @default(false)
  walletAddress   String?
  stripeCustomerId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  challenges       Challenge[]
  submissions      Submission[]
  payments         Payment[]
  paymentSessions  PaymentSession[]

  @@map("users")
}

model Challenge {
  id              String   @id @default(uuid())
  creatorId       String
  title           String
  description     String
  requiredTags    String[]
  rewardType      String   // 'USD' | 'USDC' | 'SUBSCRIPTION'
  rewardAmount    Float
  platformFee     Float
  netPayout       Float
  buyoutFeePaid   Boolean  @default(false)
  rewardSubscriptionId String?
  deadline        DateTime
  visibility      String   // 'PUBLIC' | 'PRIVATE'
  whopCompanyId   String?
  status          String   @default("DRAFT") // 'DRAFT' | 'FUNDED' | 'ACTIVE' | 'COMPLETED' | 'CANCELLED'
  isFunded        Boolean  @default(false)
  totalSubmissions Int     @default(0)
  approvedSubmissions Int  @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  creator         User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  submissions     Submission[]
  payments        Payment[]
  paymentSessions PaymentSession[]

  @@map("challenges")
}

model Submission {
  id              String    @id @default(uuid())
  challengeId     String
  userId          String
  contentUrl      String
  contentType     String    // 'TIKTOK' | 'TWITTER' | 'INSTAGRAM' | 'YOUTUBE' | 'OTHER'
  status          String    @default("PENDING") // 'PENDING' | 'APPROVED' | 'REJECTED' | 'PAID'
  rejectionReason String?
  submittedAt     DateTime  @default(now())
  reviewedAt      DateTime?
  paidAt          DateTime?

  // Relations
  challenge       Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        Payment[]

  @@unique([challengeId, userId])
  @@map("submissions")
}

model Payment {
  id                    String    @id @default(uuid())
  challengeId           String?
  userId                String
  submissionId          String?
  type                  String    // 'FUNDING' | 'PAYOUT' | 'PLATFORM_FEE' | 'BUYOUT_FEE'
  method                String    // 'WHOP' | 'STRIPE' | 'CRYPTO'
  amount                Float
  platformFee           Float     @default(0)
  currency              String    @default("USD")
  whopReceiptId         String?
  whopPlanId            String?
  stripePaymentIntentId String?
  cryptoTransactionHash String?
  metadata              Json?
  status                String    @default("PENDING") // 'PENDING' | 'COMPLETED' | 'FAILED' | 'REFUNDED'
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  challenge             Challenge?  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission            Submission? @relation(fields: [submissionId], references: [id], onDelete: SetNull)

  @@map("payments")
}

// Model for tracking payment sessions
model PaymentSession {
  id              String    @id @default(uuid())
  sessionId       String    @unique // Whop checkout session ID
  challengeId     String
  userId          String
  amount          Float
  platformFee     Float
  totalAmount     Float     // amount + platformFee
  currency        String    @default("USD")
  metadata        Json?
  status          String    @default("PENDING") // 'PENDING' | 'COMPLETED' | 'FAILED' | 'EXPIRED'
  checkoutUrl     String?
  expiresAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  challenge       Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_sessions")
}

 